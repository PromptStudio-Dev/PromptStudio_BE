# ============================================
# 워크플로우 이름
# ============================================
name: Deploy to ECR and EC2

# ============================================
# 트리거 조건
# ============================================
on:
  push:
    branches:
      - main      # main 브랜치에 푸시할 때
      - develop   # develop 브랜치에 푸시할 때
  # pull_request:  # PR 생성 시에도 실행하고 싶다면 주석 해제

# ============================================
# 실행할 작업
# ============================================
jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest  # GitHub이 제공하는 Ubuntu 서버에서 실행

    steps:
      # ----------------------------------------
      # Step 1: 코드 체크아웃
      # ----------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        # GitHub 리포지토리의 코드를 가져옴

      # ----------------------------------------
      # Step 2: JDK 17 설치
      # ----------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'  # Eclipse Temurin (OpenJDK)
          cache: gradle  # Gradle 의존성 캐싱 → 빌드 속도 향상

      # ----------------------------------------
      # Step 3: Gradle 실행 권한 부여
      # ----------------------------------------
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        # Linux에서 gradlew 파일을 실행 가능하게 만듦

      # ----------------------------------------
      # Step 4: Spring Boot 빌드
      # ----------------------------------------
      - name: Build with Gradle
        run: ./gradlew clean build -x test
        # JAR 파일 생성 (테스트 제외로 시간 단축)

      # ----------------------------------------
      # Step 5: AWS 자격증명 설정
      # ----------------------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
        # GitHub Secrets에 저장된 AWS 키로 인증

      # ----------------------------------------
      # Step 6: ECR 로그인
      # ----------------------------------------
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        # ECR에 Docker 이미지를 푸시하기 위해 로그인

      # ----------------------------------------
      # Step 7: Docker 이미지 빌드 및 푸시
      # ----------------------------------------
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: promptstudio
          IMAGE_TAG: ${{ github.sha }}  # Git 커밋 해시 (고유한 버전)
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        # latest 태그: 항상 최신 버전을 가리킴
        # 커밋해시 태그: 특정 버전 롤백 가능

      # ----------------------------------------
      # Step 8: EC2에 배포 명령 전송
      # ----------------------------------------
      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: ${{ secrets.OPENAI_MODEL }}
          CORS_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
        run: |
          echo "$EC2_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST bash << EOF
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
          
            # 기존 컨테이너 중지 및 삭제
            docker stop promptstudio 2>/dev/null || true
            docker rm promptstudio 2>/dev/null || true
          
            # 새 이미지 pull
            docker pull $ECR_REGISTRY/promptstudio:latest
          
            # 새 컨테이너 실행
            docker run -d \
              --name promptstudio \
              --restart unless-stopped \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL='$DB_URL' \
              -e DB_USERNAME='$DB_USERNAME' \
              -e DB_PASSWORD='$DB_PASSWORD' \
              -e OPENAI_API_KEY='$OPENAI_API_KEY' \
              -e OPENAI_MODEL='$OPENAI_MODEL' \
              -e CORS_ALLOWED_ORIGINS='$CORS_ORIGINS' \
              $ECR_REGISTRY/promptstudio:latest
          
            # 사용하지 않는 이미지 정리
            docker image prune -af
          
            # 배포 확인
            sleep 5
            docker ps | grep promptstudio
            echo "Deployment completed!"
          EOF
          
          rm -f private_key.pem